#include <sqlca.h>
#include <stdio.h>
#include <string.h>

//EXEC SQL INCLUDE sqlca;

void ShowTableList( );


void ShowAll() {
    EXEC SQL BEGIN DECLARE SECTION;
        char software_name[50];
        char description[255];
        long size;
        char category[50];
        char email[100];
        char fio[150];
        char organization[150];
        char pkg_name[150];
        char pkg_location[150];
        char type_location[50];
    EXEC SQL END DECLARE SECTION;

    
    EXEC SQL DECLARE cursor_ CURSOR FOR
        SELECT s.software_name, s.description, s.size, s.category, dev.email, dev.fio, dev.organization, dep.pkg_name, m.pkg_location, m.type_location  FROM software_info s, software_and_developers sd, developers dev, depend dep, order_pkg o, methods m where s.software_name=sd.software_name AND sd.email=dev.email AND s.software_name=dep.software_name AND s.software_name=o.software_name AND o.pkg_location=m.pkg_location;
    
    EXEC SQL OPEN cursor_;
    printf("software_name |\t description |\t size |\t category |\t e-mail |\t fio |\t organization |\t pkg_name |\t pkg_location |\t type_location\n");
    while(1)
    {
        
        EXEC SQL FETCH cursor_ INTO :software_name, :description, :size, :category, :email, :fio, :organization, :pkg_name, :pkg_location, :type_location ;
        
        if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
        printf("%s \t %s \t %ld \t %s \t %s \t %s \t %s \t %s \t %s \t %s\n", software_name, description, size, category, email, fio, organization, pkg_name, pkg_location, type_location );
    }
    
    printf("\n\n");
    
    EXEC SQL CLOSE cursor_;
}


void ShowTable1() {
   
	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char description[255];
		long size;
		char category[50];
	EXEC SQL END DECLARE SECTION;

	    
	EXEC SQL DECLARE cursor_1 CURSOR FOR
		SELECT software_name, description, size, category FROM software_info;
	    
	EXEC SQL OPEN cursor_1;
	printf("software_name |\t description |\t size |\t category \n");
	while(1) {
	  
		EXEC SQL FETCH cursor_1 INTO :software_name, :description, :size, :category;
		
		if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
		printf("%s \t %s \t %ld \t %s \n", software_name, description, size, category );
	}
	    
	printf("\n\n");
	    
	EXEC SQL CLOSE cursor_1;
	
	
	//EXEC SQL DEALLOCATE PREPARE name;
}


void ShowTable2() {
    EXEC SQL BEGIN DECLARE SECTION;
        char software_name[50];
        char email[100];
        
    EXEC SQL END DECLARE SECTION;

    
    EXEC SQL DECLARE cursor_2 CURSOR FOR
        SELECT software_name, email FROM software_and_developers;
    
    EXEC SQL OPEN cursor_2;
    printf("software_name |\t e-mail \n");
    while(1) {
        
        EXEC SQL FETCH cursor_2 INTO :software_name, :email;
        
        if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
        printf("%s \t %s \n", software_name, email);
    }
    
    printf("\n\n");
    
    EXEC SQL CLOSE cursor_2;

}


void ShowTable3() {
   
	EXEC SQL BEGIN DECLARE SECTION;
		char email[100];
		char fio[150];
		char organization[150];
	EXEC SQL END DECLARE SECTION;

	    
	EXEC SQL DECLARE cursor_3 CURSOR FOR
		SELECT fio, email, organization FROM developers;
	    
	EXEC SQL OPEN cursor_3;
	printf("fio |\t e-mail |\t organization \n");
	while(1) {
	  
		EXEC SQL FETCH cursor_3 INTO :fio, :email, :organization;
		
		if( !strncmp(sqlca.sqlstate, "02000", 5)) break;       
		printf("%s \t %s \t %s \n", fio, email, organization);
	}
	    
	printf("\n\n");
	    
	EXEC SQL CLOSE cursor_3;
}


void ShowTable4() {
	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_name[150];
	EXEC SQL END DECLARE SECTION;

      
	EXEC SQL DECLARE cursor_4 CURSOR FOR
		SELECT software_name, pkg_name FROM depend;
      
	EXEC SQL OPEN cursor_4;
	printf("software_name |\t pkg_name \n");
	while(1) {
	  
		EXEC SQL FETCH cursor_4 INTO :software_name, :pkg_name;
	  
		if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
		printf("%s \t %s \n", software_name, pkg_name);
	}
      
	printf("\n\n");
      
	EXEC SQL CLOSE cursor_4;

}


void ShowTable5() {
	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;

      
	EXEC SQL DECLARE cursor_5 CURSOR FOR
		SELECT software_name, pkg_location FROM order_pkg;
      
	EXEC SQL OPEN cursor_5;
	printf("software_name |\t pkg_location \n");
	while(1) {
	  
		EXEC SQL FETCH cursor_5 INTO :software_name, :pkg_location;
	  
		if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
		printf("%s \t %s \n", software_name, pkg_location);
	}
      
	printf("\n\n");
      
	EXEC SQL CLOSE cursor_5;

}


void ShowTable6() {
	EXEC SQL BEGIN DECLARE SECTION;
		char pkg_location[150];
		char type_location[50];
	EXEC SQL END DECLARE SECTION;

      
	EXEC SQL DECLARE cursor_6 CURSOR FOR
		SELECT pkg_location, type_location FROM methods;
      
	EXEC SQL OPEN cursor_6;
	printf("pkg_location |\t type_location \n");
	while(1) {
	  
		EXEC SQL FETCH cursor_6 INTO :pkg_location, :type_location;
	  
		if( !strncmp(sqlca.sqlstate, "02000", 5)) break;        
		printf("%s \t %s \n", pkg_location, type_location);
	}
      
	printf("\n\n");
      
	EXEC SQL CLOSE cursor_6;

}


void Show() {

	printf("\nChoose one table:");
	ShowTableList();
	printf("9. For show all tables \n");
	printf("0. For cancel mod \n");
	int choose = 0;
	scanf("%d", &choose);
	switch(choose) {
		case 1: { 
			ShowTable1();
			break;
		} 
		case 2: { 
			ShowTable2();
			break;
		} 
		case 3: { 
			ShowTable3();
			break;
		}
		case 4: { 
			ShowTable4();
			break;
		}
		case 5: { 
			ShowTable5();
			break;
		}
		case 6: { 
			ShowTable6();
			break;
		}
		case 9: { 
			ShowAll();
			break;
		}
		case 0: { 
			break;
		}
		default: {
			printf("Sorry, gay, table with this number does not exist!");
		}
	}
}


void Delete1() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char description[50];
		long size;
		char category[50];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nselect the deleted 'software_name', please => ");
	scanf("%s", software_name);
		    
	EXEC SQL DELETE FROM software_info WHERE software_name = :software_name ;
	if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Delete2() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char email[100];
	EXEC SQL END DECLARE SECTION;    
	
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. software_name.\n");
	printf("2. e-mail.\n");
	printf("3. both.\n");
	scanf("%d", &item);
	switch(item) {
		case 1: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			    
			EXEC SQL DELETE FROM software_and_developers WHERE software_name = :software_name ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 2: {
			printf("\nselect the deleted 'email', please => ");
			scanf("%s", email);
			    
			EXEC SQL DELETE FROM software_and_developers WHERE email = :email ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 3: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			printf("\nselect the deleted 'email', please => ");
			scanf("%s", email);
			    
			EXEC SQL DELETE FROM software_and_developers WHERE email = :email AND software_name = :software_name;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
	}
	EXEC SQL COMMIT;
}


void Delete3() {

	EXEC SQL BEGIN DECLARE SECTION;
		char email[100];
		char fio[150];
		char organization[150];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nselect the deleted 'email', please => ");
	scanf("%s", email);
		    
	EXEC SQL DELETE FROM developers WHERE email = :email ;
	if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Delete4() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_name[150];
	EXEC SQL END DECLARE SECTION;    
	
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. software_name.\n");
	printf("2. pkg_name.\n");
	printf("3. both.\n");
	scanf("%d", &item);
	switch(item) {
		case 1: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			    
			EXEC SQL DELETE FROM depend WHERE software_name = :software_name ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 2: {
			printf("\nselect the deleted 'pkg_name', please => ");
			scanf("%s", pkg_name);
			    
			EXEC SQL DELETE FROM depend WHERE pkg_name = :pkg_name ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 3: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			printf("\nselect the deleted 'pkg_name', please => ");
			scanf("%s", pkg_name);
			    
			EXEC SQL DELETE FROM depend WHERE pkg_name = :pkg_name AND software_name = :software_name;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
	}
	EXEC SQL COMMIT;
}


void Delete5() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;    
	
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. software_name.\n");
	printf("2. pkg_location.\n");
	printf("3. both.\n");
	scanf("%d", &item);
	switch(item) {
		case 1: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			    
			EXEC SQL DELETE FROM order_pkg WHERE software_name = :software_name ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 2: {
			printf("\nselect the deleted 'pkg_location', please => ");
			scanf("%s", pkg_location);
			    
			EXEC SQL DELETE FROM order_pkg WHERE pkg_location = :pkg_location ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 3: {
			printf("\nselect the deleted 'software_name', please => ");
			scanf("%s", software_name);
			printf("\nselect the deleted 'pkg_location', please => ");
			scanf("%s", pkg_location);
			    
			EXEC SQL DELETE FROM order_pkg WHERE pkg_location = :pkg_location AND software_name = :software_name;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
	}
	EXEC SQL COMMIT;
}


void Delete6() {

	EXEC SQL BEGIN DECLARE SECTION;
		char type_location[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;    
	
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. type_location.\n");
	printf("2. pkg_location.\n");
	printf("3. both.\n");
	scanf("%d", &item);
	switch(item) {
		case 1: {
			printf("\nselect the deleted 'type_location', please => ");
			scanf("%s", type_location);
			    
			EXEC SQL DELETE FROM methods WHERE type_location = :type_location ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 2: {
			printf("\nselect the deleted 'pkg_location', please => ");
			scanf("%s", pkg_location);
			    
			EXEC SQL DELETE FROM methods WHERE pkg_location = :pkg_location ;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
		case 3: {
			printf("\nselect the deleted 'pkg_location', please => ");
			scanf("%s", pkg_location);
			printf("\nselect the deleted 'type_location', please => ");
			scanf("%s", type_location);
			    
			EXEC SQL DELETE FROM methods WHERE pkg_location = :pkg_location AND type_location = :type_location;
			if( strncmp(sqlca.sqlstate, "00000", 5)) {
				printf( "%s", sqlca.sqlstate );
				printf( "\n" );
			}
			break;
		}
	}
	EXEC SQL COMMIT;
}


void Delete() {

	printf("\nChoose one table:");
	ShowTableList();
	printf("0. For cancel mod \n");
	int choose = 0;
	scanf("%d", &choose);
	switch(choose) {
		case 1: { 
		Delete1();
		break;
	    } 
	    case 2: { 
		Delete2();
		break;
	    } 
	    case 3: { 
		Delete3();
		break;
	    }
	    case 4: { 
		Delete4();
		break;
	    }
	    case 5: { 
		Delete5();
		break;
	    }
	    case 6: { 
		Delete6();
		break;
	    }
	    case 0: { 
		break;
	    }
	    default: {
		printf("Sorry, gay, table with this number does not exist!");
	    }
	}
}

 
void Update1() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char description[50];
		long size;
		char category[50];
	EXEC SQL END DECLARE SECTION;    
	printf("\nselect updatable 'software_name', please => ");
	scanf("%s", software_name);
	printf("\nenter new 'description', please => ");
	scanf("%s", description);
	printf("\nenter new 'size', please => ");
	scanf("%ld", &size);
	printf("\nenter new 'category', please => ");
	scanf("%s", category);
	    
	EXEC SQL UPDATE software_info SET (description,size,category) = ( :description, :size, :category) WHERE software_name = :software_name ;
	if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Update2() {

	EXEC SQL BEGIN DECLARE SECTION;
		char email[100];
		char software_name[50];
	EXEC SQL END DECLARE SECTION;    
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. e-mail.\n");
	printf("2. software_name.\n");
	scanf("%d", &item);
	if(item == 1) {
		printf("\nselect updatable 'email', please => ");
		scanf("%s", email);
		printf("\nenter new 'software_name', please => ");
		scanf("%s", software_name);
		    
		EXEC SQL UPDATE software_and_developers SET (software_name ) = ( :software_name) WHERE email = :email;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else if (item == 2) {
		printf("\nselect updatable 'software_name', please => ");
		scanf("%s", software_name);
		printf("\nenter new 'email', please => ");
		scanf("%s", email);
			    
		EXEC SQL UPDATE software_and_developers SET (email ) = ( :email) WHERE software_name = :software_name;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else { }
	
	EXEC SQL COMMIT;
}


void Update3() {

	EXEC SQL BEGIN DECLARE SECTION;
		char email[100];
		char fio[150];
		char organization[150];
	EXEC SQL END DECLARE SECTION;    
	printf("\nselect updatable 'email', please => ");
	scanf("%s", email);
	printf("\nenter new 'fio', please => ");
	scanf("%s", fio);
	printf("\nenter new 'organization', please => ");
	scanf("%s", organization);
	    
	EXEC SQL UPDATE developers SET (fio,organization) = (  :fio, :organization) WHERE email = :email ;
	if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Update4() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_name[150];
	EXEC SQL END DECLARE SECTION;    
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. software_name.\n");
	printf("2. pkg_name.\n");
	scanf("%d", &item);
	if(item == 1) {
		printf("\nselect updatable 'software_name', please => ");
		scanf("%s", software_name);
		printf("\nenter new 'pkg_name', please => ");
		scanf("%s", pkg_name);
		    
		EXEC SQL UPDATE depend SET (pkg_name ) = ( :pkg_name) WHERE software_name = :software_name;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else if (item == 2) {
		printf("\nselect updatable 'pkg_name', please => ");
		scanf("%s", pkg_name);
		printf("\nenter new 'software_name', please => ");
		scanf("%s", software_name);
			    
		EXEC SQL UPDATE depend SET software_name = :software_name WHERE pkg_name = :pkg_name;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else { }
	
	EXEC SQL COMMIT;
}


void Update5() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;    
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. software_name.\n");
	printf("2. pkg_location.\n");
	scanf("%d", &item);
	if(item == 1) {
		printf("\nselect updatable 'software_name', please => ");
		scanf("%s", software_name);
		printf("\nenter new 'pkg_location', please => ");
		scanf("%s", pkg_location);
		    
		EXEC SQL UPDATE order_pkg SET (pkg_location ) = ( :pkg_location) WHERE software_name = :software_name;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else if (item == 2) {
		printf("\nselect updatable 'pkg_location', please => ");
		scanf("%s", pkg_location);
		printf("\nenter new 'software_name', please => ");
		scanf("%s", software_name);
			    
		EXEC SQL UPDATE order_pkg SET software_name = :software_name WHERE pkg_location = :pkg_location;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else { }
	
	EXEC SQL COMMIT;
}


void Update6() {

	EXEC SQL BEGIN DECLARE SECTION;
		char type_location[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;    
	int item = 0;
	printf("choose table field for search, please =>\n");
	printf("1. type_location.\n");
	printf("2. pkg_location.\n");
	scanf("%d", &item);
	if(item == 1) {
		printf("\nselect updatable 'type_location', please => ");
		scanf("%s", type_location);
		printf("\nenter new 'pkg_location', please => ");
		scanf("%s", pkg_location);
		    
		EXEC SQL UPDATE methods SET (pkg_location ) = ( :pkg_location) WHERE type_location = :type_location;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else if (item == 2) {
		printf("\nselect updatable 'pkg_location', please => ");
		scanf("%s", pkg_location);
		printf("\nenter new 'type_location', please => ");
		scanf("%s", type_location);
			    
		EXEC SQL UPDATE methods SET type_location = :type_location WHERE pkg_location = :pkg_location;
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
			printf( "%s", sqlca.sqlstate );
			printf( "\n" );
		}
	} else { }
	
	EXEC SQL COMMIT;
}


void Update() {

	printf("\nChoose one table:");
	ShowTableList();
	printf("0. For cancel mod \n");
	int choose = 0;
	scanf("%d", &choose);
	switch(choose) {
		case 1: { 
		Update1();
		break;
	    } 
	    case 2: { 
		Update2();
		break;
	    } 
	    case 3: { 
		Update3();
		break;
	    }
	    case 4: { 
		Update4();
		break;
	    }
	    case 5: { 
		Update5();
		break;
	    }
	    case 6: { 
		Update6();
		break;
	    }
	    case 0: { 
		break;
	    }
	    default: {
		printf("Sorry, gay, table with this number does not exist!");
	    }
	}
}


void Insert1() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char description[50];
		long size;
		char category[50];
	EXEC SQL END DECLARE SECTION;    
	printf("\nenter 'software_name', please => ");
	scanf("%s", software_name);
	printf("\nenter 'description', please => ");
	scanf("%s", description);
	printf("\nenter 'size', please => ");
	scanf("%ld", &size);
	printf("\nenter 'category', please => ");
	scanf("%s", category);
	    
	EXEC SQL INSERT INTO software_info VALUES(:software_name, :description, :size, :category);
	if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert2() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char email[100];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nenter 'software_name', please => ");
	scanf("%s", software_name);
	printf("\nenter 'email', please => ");
	scanf("%s", email);
    
	EXEC SQL INSERT INTO software_and_developers VALUES(:email, :software_name);
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert3() {

	EXEC SQL BEGIN DECLARE SECTION;
		char email[100];
		char fio[150];
		char organization[150];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nenter 'email', please => ");
	scanf("%s", email);
	printf("\nenter 'fio', please => ");
	scanf("%s", fio);
	printf("\nenter 'organization', please => ");
	scanf("%s", organization);
    
	EXEC SQL INSERT INTO developers VALUES(:email, :fio, :organization);
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert4() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_name[150];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nenter 'software_name', please => ");
	scanf("%s", software_name);
	printf("\nenter 'pkg_name', please => ");
	scanf("%s", pkg_name);
    
	EXEC SQL INSERT INTO depend VALUES(:software_name, :pkg_name);
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert5() {

	EXEC SQL BEGIN DECLARE SECTION;
		char software_name[50];
		char pkg_location[150];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nenter 'software_name', please => ");
	scanf("%s", software_name);
	printf("\nenter 'pkg_location', please => ");
	scanf("%s", pkg_location);
    
	EXEC SQL INSERT INTO order_pkg VALUES(:software_name, :pkg_location);
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert6() {

	EXEC SQL BEGIN DECLARE SECTION;
		char pkg_location[150];
		char type_location[50];
	EXEC SQL END DECLARE SECTION;    
	
	printf("\nenter 'pkg_location', please => ");
	scanf("%s", pkg_location);
	printf("\nenter 'type_location', please => ");
	scanf("%s", type_location);
    
	EXEC SQL INSERT INTO methods VALUES(:pkg_location, :type_location);
		if( strncmp(sqlca.sqlstate, "00000", 5)) {
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
	}
	EXEC SQL COMMIT;
}


void Insert() {

	printf("\nChoose one table:");
	ShowTableList();
	printf("0. For cancel mod \n");
	int choose = 0;
	scanf("%d", &choose);
	switch(choose) {
		case 1: { 
		Insert1();
		break;
	    } 
	    case 2: { 
		Insert2();
		break;
	    } 
	    case 3: { 
		Insert3();
		break;
	    }
	    case 4: { 
		Insert4();
		break;
	    }
	    case 5: { 
		Insert5();
		break;
	    }
	    case 6: { 
		Insert6();
		break;
	    }
	    case 0: { 
		break;
	    }
	    default: {
		printf("Sorry, gay, table with this number does not exist!");
	    }
	}
}


void ShowTableList( ) {
	printf("\n1. software_info\n");
	printf("2. software_and_developers\n");
	printf("3. developers\n");
	printf("4. depend\n");
	printf("5. order_pkg\n");
	printf("6. methods\n\n\n");
}


void Menu( ) {
	bool do_it= true;
	int item=0;
	while(do_it) {
	    printf("\n\n\n0. Exit.\n");
	    printf("1. Show.\n");
	    printf("2. Insert.\n");
	    printf("3. Update.\n");
	    printf("4. Delete.\n");
	    printf("5. Show table list.\n\n");
	    scanf("%d", &item);
	    switch(item) {
		case 0: {
		    do_it=false;
		    break;
		}
		case 1: {
		    Show();
		    break;
		}
		case 2: {
		    Insert();
		    break;
		}
		case 3: {
		    Update();
		    break;
		}
		case 4: {
		    Delete();
		    break;
		}
		case 5: {
		    ShowTableList();
		    break;
		}
		default: {
		    printf("Gay, try again =)\n");
		}
	    }
	}
}


int main() {

	//Connecting with a Data Base
	EXEC SQL BEGIN DECLARE SECTION;
	char dbName[255], userName[100], password[100];
	EXEC SQL END DECLARE SECTION;
 
	//strcpy(dbName, "freeman@127.0.0.1:5432");
	strcpy(userName, "");
	strcpy(password, "");
	//strcpy(dbName, "student_db");
	//strcpy(userName, "student");
	//strcpy(password, "tvgu");
	strcpy(dbName, "soft");
	if(strlen(userName) > 0) {
		EXEC SQL CONNECT TO :dbName USER :userName IDENTIFIED BY :password;
	} else {
		EXEC SQL CONNECT TO :dbName;
	}
	//Test connecting
	if( !strncmp(sqlca.sqlstate, "00000", 5)) {
		printf("\nConnect is ok!\n");
	}else{
		printf( "%s", sqlca.sqlstate );
		printf( "\n" );
		return 0;
	}
	
	Menu();
      
	EXEC SQL disconnect;
	if( !strncmp(sqlca.sqlstate, "00000", 5)) {
	    printf("\nDisconnect\n");
	}else{
	    printf( "%s", sqlca.sqlstate );
	    printf( "\n" );
	}

	return 0;
}


//ecpg postgresql_client.pgc
//gcc postgresql_client.c -I /usr/include/pgsql/ -lecpg -o postgresql_client -Wextra -g
//gcc postgresql_client.c -I /usr/include/postgresql/ -lecpg -o postgresql_client -Wextra -g
//./postgresql_client
